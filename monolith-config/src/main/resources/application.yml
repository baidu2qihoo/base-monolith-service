spring:
  application:
    name: monolith-config
  profiles:
    active: ${APP_ENV:dev}
    
server:
  port: 8080

# 环境特定配置
app:
  env: ${APP_ENV:dev}
  tenant: ${APP_TENANT:default}

# Apollo配置 - 支持环境隔离
apollo:
  bootstrap:
    enabled: true
    namespaces: application,SentinelConfig,TracingConfig,MetricsConfig
  meta: ${APOLLO_META:http://localhost:8080}
  cacheDir: /opt/data/apollo-config
  # 根据环境使用不同的cluster
  config-service: ${APOLLO_CONFIG_SERVICE:http://localhost:8080}
  
# 数据库配置 - 根据环境区分
spring:
  datasource:
    url: ${DB_URL:jdbc:h2:mem:testdb}
    username: ${DB_USERNAME:sa}
    password: ${DB_PASSWORD:}
    hikari:
      maximum-pool-size: ${DB_MAX_POOL_SIZE:10}
  jpa:
    hibernate:
      ddl-auto: ${DB_DDL_AUTO:update}
    properties:
      hibernate:
        format_sql: false

# Redis配置 - 根据环境区分
spring:
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    timeout: 2000ms

# 线程池配置
threadpool:
  core: ${THREADPOOL_CORE:10}
  max: ${THREADPOOL_MAX:50}
  queue: ${THREADPOOL_QUEUE:100}

# 配置中心相关
config:
  backup:
    interval:
      ms: 3600000

# 注册中心相关
registry:
  cleanup:
    interval:
      ms: 60000

---
# 开发环境配置
spring:
  config:
    activate:
      on-profile: dev
app:
  env: dev

---
# 测试环境配置
spring:
  config:
    activate:
      on-profile: test
app:
  env: test

---
# 灰度环境配置
spring:
  config:
    activate:
      on-profile: gray
app:
  env: gray

---
# 生产环境配置
spring:
  config:
    activate:
      on-profile: prod
app:
  env: prod
  # 生产环境更严格的配置
spring:
  datasource:
    hikari:
      maximum-pool-size: ${DB_MAX_POOL_SIZE:20}
