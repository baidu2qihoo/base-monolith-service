server:
  port: ${SERVER_PORT:8080}

spring:
  application:
    name: ${APP_NAME:monolith-service}
  profiles:
    active: ${APP_ENV:dev}
    
  # 数据库配置
  datasource:
    url: ${DB_URL:jdbc:h2:mem:testdb}
    username: ${DB_USERNAME:sa}
    password: ${DB_PASSWORD:}
    hikari:
      maximum-pool-size: ${DB_MAX_POOL_SIZE:10}
  jpa:
    hibernate:
      ddl-auto: ${DB_DDL_AUTO:update}
    show-sql: ${DB_SHOW_SQL:false}
    
  # Redis配置
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    timeout: 2000ms
    
  cloud:
    # Nacos服务注册与发现配置
    nacos:
      discovery:
        server-addr: ${NACOS_ADDR:localhost:8848}
        namespace: ${NACOS_NAMESPACE:${APP_ENV:dev}}
        group: ${NACOS_GROUP:DEFAULT_GROUP}
        metadata:
          env: ${APP_ENV:dev}
          
    # Gateway网关配置
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      routes:
        - id: default-route
          uri: lb://monolith-service
          predicates:
            - Path=/api/**
          filters:
            - StripPrefix=1
            
    # Sentinel限流熔断配置
    sentinel:
      transport:
        dashboard: ${SENTINEL_DASHBOARD:localhost:8080}
        port: ${SENTINEL_PORT:8719}
      eager: true
      datasource:
        flow-rules:
          nacos:
            server-addr: ${NACOS_ADDR:localhost:8848}
            dataId: ${spring.application.name}-${APP_ENV:dev}-flow-rules
            groupId: SENTINEL_GROUP
            ruleType: flow
        degrade-rules:
          nacos:
            server-addr: ${NACOS_ADDR:localhost:8848}
            dataId: ${spring.application.name}-${APP_ENV:dev}-degrade-rules
            groupId: SENTINEL_GROUP
            ruleType: degrade

# Apollo配置中心
apollo:
  bootstrap:
    enabled: true
    namespaces: application,SentinelConfig-${APP_ENV:dev},GatewayConfig-${APP_ENV:dev}
  meta: ${APOLLO_META:http://localhost:8080}
  cacheDir: /opt/data/apollo-config

# 应用环境配置
app:
  env: ${APP_ENV:dev}
  name: ${APP_NAME:monolith-service}

# 线程池配置
threadpool:
  core: ${THREADPOOL_CORE:10}
  max: ${THREADPOOL_MAX:50}
  queue: ${THREADPOOL_QUEUE:100}

# 监控配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics
  endpoint:
    health:
      show-details: always
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        all: true
      percentiles:
        all: 0.5,0.9,0.95,0.99
      sla:
        all: 1ms,5ms,10ms,50ms,100ms,500ms,1s,5s
    tags:
      env: ${APP_ENV:dev}
      application: ${spring.application.name}

# 日志配置
logging:
  level:
    root: ${LOG_LEVEL:INFO}
    com.hugh.base.service: ${APP_LOG_LEVEL:DEBUG}
    org.springframework.cloud.gateway: ${GATEWAY_LOG_LEVEL:INFO}

---
# 开发环境配置
spring:
  config:
    activate:
      on-profile: dev
app:
  env: dev

---
# 测试环境配置
spring:
  config:
    activate:
      on-profile: test
app:
  env: test

---
# 灰度环境配置
spring:
  config:
    activate:
      on-profile: gray
app:
  env: gray

---
# 生产环境配置
spring:
  config:
    activate:
      on-profile: prod
app:
  env: prod
logging:
  level:
    root: WARN
    com.hugh.base.service: INFO
